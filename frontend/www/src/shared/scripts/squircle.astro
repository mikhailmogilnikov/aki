<script is:inline type="module">
  (async () => {
    await new Promise((resolve, reject) => {
      const link = document.createElement("link");
      link.rel = "stylesheet";
      link.href = "/squircle.css";
      link.onload = () => resolve();
      link.onerror = () => reject(new Error("Failed to load CSS"));
      document.head.appendChild(link);
    });

    if (!("paintWorklet" in CSS)) {
      await import("/scripts/css-paint-polyfill.js");

      await new Promise((resolve) => {
        const checkPaintWorklet = () => {
          if (CSS.paintWorklet && CSS.paintWorklet.addModule) {
            resolve();
          } else {
            setTimeout(checkPaintWorklet, 50);
          }
        };
        checkPaintWorklet();
      });

      await new Promise((resolve) => setTimeout(resolve, 100));
    }

    try {
      await CSS.paintWorklet.addModule("/scripts/squircle.min.js");

      forceRepaintSquircleElements();
    } catch (error) {
      console.warn("Failed to load squircle paintWorklet:", error);

      setTimeout(async () => {
        try {
          await CSS.paintWorklet.addModule("/scripts/squircle.min.js");
          forceRepaintSquircleElements();
        } catch (retryError) {
          console.error(
            "Failed to load squircle paintWorklet on retry:",
            retryError
          );
        }
      }, 200);
    }

          function forceRepaintSquircleElements() {
        // Повторяем несколько раз с разными задержками для Safari
        const repaintAttempts = [0, 100, 300, 500];
        
        repaintAttempts.forEach(delay => {
          setTimeout(() => {
            requestAnimationFrame(() => {
              requestAnimationFrame(() => {
                const squircleElements = document.querySelectorAll(
                  ".squircle, .squircle-outline, .squircle-shadow"
                );

                if (squircleElements.length === 0) return;

                squircleElements.forEach((element) => {
                  const originalTransform = element.style.transform;
                  const originalOpacity = element.style.opacity;
                  
                  element.style.transform = "translateZ(0)";
                  
                  element.style.opacity = "0.999";
                  
                  element.offsetHeight;

                  requestAnimationFrame(() => {
                    element.style.transform = originalTransform;
                    element.style.opacity = originalOpacity;
                  });
                });
              });
            });
          }, delay);
        });
      }

      // Дополнительный fallback для полной загрузки страницы
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          setTimeout(forceRepaintSquircleElements, 100);
        });
      }
      
      window.addEventListener('load', () => {
        setTimeout(forceRepaintSquircleElements, 200);
      });
  })();
</script>
