---
import { sortBy } from "~/shared/lib/utils/sort-by";
import type { BentoItem, BentoSize } from "../model/bento.type";

type Props = {
  items: BentoItem[];
};

const { items } = Astro.props;

const sortedItems = sortBy(items, "order");

const GridSizes: Record<BentoSize, string> = {
  "4x1": "bento-4x1",
  "2x1": "bento-2x1",
  "2x2": "bento-2x2",
  "2x4": "bento-2x4",
  "4x2": "bento-4x2",
  "4x4": "bento-4x4",
};
---

<div id="bento-grid" class="flex flex-wrap gap-[16px] relative">
  <div id="bento-sizer" class="aspect-square absolute w-full"></div>
  {
    sortedItems.map((item) => (
      <article
        class:list={[
          GridSizes[item.size],
          {
            "squircle-shadow": item.style === "shadow",
            "squircle-outline": item.style === "outline",
            squircle: item.style === "plain",
          },
        ]}
      />
    ))
  }
</div>

<script>
  const sizer = document.getElementById("bento-sizer");
  const grid = document.getElementById("bento-grid");

  const handleResizeGrid = () => {
    const width = sizer?.clientWidth;
    if (width && width > 0) {
      grid?.setAttribute("style", `--grid-size: ${width}px;`);
    }
  };

  const initializeGrid = () => {
    // Пробуем несколько раз для более надежной инициализации
    let attempts = 0;
    const maxAttempts = 10;
    
    const tryResize = () => {
      const width = sizer?.clientWidth;
      if (width && width > 0) {
        grid?.setAttribute("style", `--grid-size: ${width}px;`);
        return true;
      }
      return false;
    };

    const retryResize = () => {
      if (tryResize()) return;
      
      attempts++;
      if (attempts < maxAttempts) {
        requestAnimationFrame(retryResize);
      }
    };

    retryResize();
  };

  // Используем ResizeObserver для более точного отслеживания изменений размеров
  if (sizer && 'ResizeObserver' in window) {
    const resizeObserver = new ResizeObserver(() => {
      handleResizeGrid();
    });
    resizeObserver.observe(sizer);
  }

  window.addEventListener("resize", handleResizeGrid);

  // Инициализируем сетку после загрузки DOM
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeGrid);
  } else {
    initializeGrid();
  }

  // Дополнительная проверка через небольшую задержку для Safari
  setTimeout(initializeGrid, 100);
</script>
